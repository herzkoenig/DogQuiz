@page
@model DogQuiz.TempUI.Pages.CreateBreedModel
@{
    ViewData["Title"] = "Create Breed";
}

<h1>Create Breed</h1>

<div id="form-messages" class="alert d-none"></div>

<form id="create-breed-form">
    <div class="form-group">
        <label for="name">Name</label>
        <input id="name" name="name" class="form-control" required />
    </div>

    <div class="form-group">
        <label for="description">Description</label>
        <textarea id="description" name="description" class="form-control"></textarea>
    </div>

    <div class="form-group">
        <label for="difficulty">Difficulty</label>
        <input id="difficulty" name="difficulty" type="number" min="1" max="10" class="form-control" />
    </div>

    <div class="form-group">
        <label for="originText">Origin Text</label>
        <input id="originText" name="originText" class="form-control" />
    </div>

    <div class="form-group">
        <label for="historicalContext">Historical Context</label>
        <textarea id="historicalContext" name="historicalContext" class="form-control"></textarea>
    </div>

    <div class="form-group">
        <label for="countries">Select Countries of Origin</label>
        <select id="countries" name="countries" multiple class="form-control">
            @foreach (var country in Model.AvailableCountries)
            {
                <option value="@country.TwoLetterCode">@country.Name</option>
            }
        </select>
    </div>

    <div class="form-group">
        <label for="additionalNames">Additional Names</label>
        <input id="additionalNames" name="additionalNames" class="form-control" placeholder="Comma-separated names" />
    </div>

    <div class="form-group">
        <label for="additionalImageUrls">Additional Image URLs</label>
        <input id="additionalImageUrls" name="additionalImageUrls" class="form-control" placeholder="Comma-separated URLs" />
    </div>

@*     <div class="form-group">
        <label>Roles</label>
        @foreach (var role in Model.AvailableRoles)
        {
            <div>
                <input type="checkbox" name="roles" value="@role" />
                <label>@role</label>
            </div>
        }
    </div> *@

    <button type="submit" class="btn btn-primary">Create Breed</button>
</form>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const form = document.getElementById('create-breed-form');
        const messagesDiv = document.getElementById('form-messages');

    document.addEventListener('DOMContentLoaded', () => {
        const form = document.getElementById('create-breed-form');
        const messagesDiv = document.getElementById('form-messages');

        form.addEventListener('submit', async (event) => {
            event.preventDefault();

            const formData = new FormData(form);
            const payload = {
                name: formData.get('name'),
                description: formData.get('description'),
                difficulty: formData.get('difficulty'),
                historicalContext: formData.get('historicalContext'),
                additionalNames: formData.get('additionalNames').split(',').map(name => name.trim()),
                additionalImageUrls: formData.get('additionalImageUrls').split(',').map(url => url.trim())
            };

            try {
                const response = await fetch('/api/breeds', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });

                if (!response.ok) throw new Error(await response.text());
                messagesDiv.textContent = 'Breed created successfully!';
                messagesDiv.className = 'alert alert-success';
                form.reset();
            } catch (error) {
                messagesDiv.textContent = error.message;
                messagesDiv.className = 'alert alert-danger';
            }
        });
    });


        // Submit form via API
        form.addEventListener('submit', function (event) {
            event.preventDefault();

            const formData = new FormData(form);
            const payload = {
                name: formData.get('name'),
                description: formData.get('description'),
                difficulty: formData.get('difficulty'),
                originText: formData.get('originText'),
                historicalContext: formData.get('historicalContext'),
                // selectedCountryIds: Array.from(countriesSelect.selectedOptions).map(option => option.value),
                additionalNames: formData.get('additionalNames').split(',').map(name => name.trim()),
                additionalImageUrls: formData.get('additionalImageUrls').split(',').map(url => url.trim()),
                selectedRoleTypes: Array.from(form.querySelectorAll('input[name="roles"]:checked')).map(role => role.value)
            };

            fetch('/api/breeds', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(payload)
            })
                .then(response => {
                    if (response.ok) {
                        messagesDiv.textContent = 'Breed created successfully!';
                        messagesDiv.classList.remove('d-none', 'alert-danger');
                        messagesDiv.classList.add('alert-success');
                        form.reset();
                    } else {
                        return response.json().then(err => {
                            throw new Error(err.message || 'Failed to create breed.');
                        });
                    }
                })
                .catch(error => {
                    messagesDiv.textContent = error.message;
                    messagesDiv.classList.remove('d-none');
                    messagesDiv.classList.add('alert-danger');
                });
        });
    });
</script>
