@page
@model DogQuiz.TempUI.Pages.CreateBreedModel
@{
    ViewData["Title"] = "Create Breed";
}

<h1>Create Breed</h1>

<div id="form-messages" class="alert d-none"></div>

<form id="create-breed-form" method="post">
    <div class="form-group">
        <label for="name">Name</label>
        <input id="name" name="name" class="form-control" required />
    </div>

    <div class="form-group">
        <label for="description">Description</label>
        <textarea id="description" name="description" class="form-control"></textarea>
    </div>

    <div class="form-group">
        <label for="roles">Roles</label>
        <input id="roles" name="roles" class="form-control" placeholder="Comma-separated roles" />
    </div>

    <div class="form-group">
        <label for="breedTags">Breed Tags</label>
        <input id="breedTags" name="breedTags" class="form-control" placeholder="Comma-separated tags" />
    </div>

    <div class="form-group">
        <label for="additionalNames">Additional Names</label>
        <input id="additionalNames" name="additionalNames" class="form-control" placeholder="Comma-separated names" />
    </div>

    <div class="form-group">
        <label for="countries">Select Countries of Origin</label>
        <select id="countries" name="countries" multiple class="form-control">
            @foreach (var country in Model.AvailableCountries)
            {
                <option value="@country.TwoLetterCode">@country.Name</option>
            }
        </select>
    </div>

    <button type="submit" class="btn btn-primary">Create Breed</button>
</form>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const form = document.getElementById('create-breed-form');
        const messagesDiv = document.getElementById('form-messages');

        form.addEventListener('submit', async (event) => {
            event.preventDefault();

            const formData = new FormData(form);

            const payload = {
                name: formData.get('name'),
                description: formData.get('description') || "",
                origin: Array.from(form.querySelector('#countries').selectedOptions).map(option => option.value),
                roles: formData.get('roles').split(',').map(r => r.trim()).filter(r => r),
                breedTags: formData.get('breedTags').split(',').map(bt => bt.trim()).filter(bt => bt),
                additionalNames: formData.get('additionalNames').split(',').map(an => an.trim()).filter(an => an)
            };

            try {
                const response = await fetch('/api/breeds', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });

                    if (!response.ok) {
                        const errorContent = await response.text();
                        const error = new Error("API Error");
                        error.response = errorContent; // Attach response content to error object
                        throw error;
                    }

                messagesDiv.textContent = 'Breed created successfully!';
                messagesDiv.className = 'alert alert-success';
                form.reset();
            } catch (error) {
                try {
                    // Parse error details from response
                    const responseText = await error.response.text();
                    const errorDetails = JSON.parse(responseText);
                    messagesDiv.textContent = errorDetails.Message || "An unexpected error occurred.";
                } catch {
                    // Fallback to generic message if parsing fails
                    messagesDiv.textContent = error.message || "An error occurred. Please try again later.";
                }
                messagesDiv.className = 'alert alert-danger';
            }
        });
    });
</script>
