// <auto-generated />
using System;
using DogQuiz.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DogQuiz.MigrationService.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241117154922_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BreedBreedMix", b =>
                {
                    b.Property<int>("BreedId")
                        .HasColumnType("int");

                    b.Property<int>("BreedMixId")
                        .HasColumnType("int");

                    b.HasKey("BreedId", "BreedMixId");

                    b.HasIndex("BreedMixId");

                    b.ToTable("BreedBreedMix");
                });

            modelBuilder.Entity("DogQuiz.Data.Entities.Auth.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("DogQuiz.Data.Entities.Auth.PermissionRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("DogQuiz.Data.Entities.Auth.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityProviderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DogQuiz.Data.Entities.Bases.Answer", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("AnswerType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedById")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Answers");

                    b.HasDiscriminator<string>("AnswerType").HasValue("Answer");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("DogQuiz.Data.Entities.Bases.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BreedId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedById")
                        .HasColumnType("int");

                    b.Property<int?>("Difficulty")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BreedId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("DogQuiz.Data.Entities.Breeds.Breed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BreedCollectionId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedById")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Difficulty")
                        .HasColumnType("int");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Origin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BreedCollectionId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("ImageId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("UpdatedById");

                    b.ToTable("Breeds");
                });

            modelBuilder.Entity("DogQuiz.Data.Entities.Breeds.BreedCollection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CollectionName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BreedCollection");
                });

            modelBuilder.Entity("DogQuiz.Data.Entities.Breeds.BreedMix", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BreedCollectionId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedById")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BreedCollectionId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("BreedMixes");
                });

            modelBuilder.Entity("DogQuiz.Data.Entities.Breeds.BreedName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BreedId")
                        .HasColumnType("int");

                    b.Property<int?>("BreedVarietyId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedById")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BreedId");

                    b.HasIndex("BreedVarietyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("BreedNames");
                });

            modelBuilder.Entity("DogQuiz.Data.Entities.Breeds.BreedRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BreedId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedById")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PermissionRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BreedId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("BreedRoles");
                });

            modelBuilder.Entity("DogQuiz.Data.Entities.Breeds.BreedVariety", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BreedCollectionId")
                        .HasColumnType("int");

                    b.Property<int>("BreedId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedById")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BreedCollectionId");

                    b.HasIndex("BreedId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("BreedVarieties");
                });

            modelBuilder.Entity("DogQuiz.Data.Entities.Breeds.NotableDog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BreedId")
                        .HasColumnType("int");

                    b.Property<int?>("BreedMixId")
                        .HasColumnType("int");

                    b.Property<int?>("BreedVarietyId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedById")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("KnownFor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PrimaryImageId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BreedId");

                    b.HasIndex("BreedMixId");

                    b.HasIndex("BreedVarietyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("PrimaryImageId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("NotableDogs");
                });

            modelBuilder.Entity("DogQuiz.Data.Entities.Breeds.NotableOwner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BreedCollectionId")
                        .HasColumnType("int");

                    b.Property<int?>("BreedId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedById")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("KnownFor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PrimaryImageId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BreedCollectionId");

                    b.HasIndex("BreedId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("PrimaryImageId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("NotableOwners");
                });

            modelBuilder.Entity("DogQuiz.Data.Entities.General.ImageDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attribution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BreedId")
                        .HasColumnType("int");

                    b.Property<int?>("BreedMixId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Folder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("License")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NotableDogId")
                        .HasColumnType("int");

                    b.Property<int?>("NotableOwnerId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BreedId");

                    b.HasIndex("BreedMixId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("NotableDogId");

                    b.HasIndex("NotableOwnerId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("ImageDetails");
                });

            modelBuilder.Entity("DogQuiz.Data.Entities.General.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BreedId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedById")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TagGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BreedId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("TagGroupId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("DogQuiz.Data.Entities.General.TagGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedById")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("TagGroups");
                });

            modelBuilder.Entity("DogQuiz.Data.Entities.Questionnaire.Fact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BreedId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedById")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BreedId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Facts");
                });

            modelBuilder.Entity("PermissionRole", b =>
                {
                    b.Property<int>("PermissionsId")
                        .HasColumnType("int");

                    b.Property<int>("RolesId")
                        .HasColumnType("int");

                    b.HasKey("PermissionsId", "RolesId");

                    b.HasIndex("RolesId");

                    b.ToTable("PermissionRole");
                });

            modelBuilder.Entity("DogQuiz.Data.Entities.Questionnaire.AnswerTrueFalse", b =>
                {
                    b.HasBaseType("DogQuiz.Data.Entities.Bases.Answer");

                    b.Property<bool?>("Bool")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("TrueFalse");
                });

            modelBuilder.Entity("DogQuiz.Data.Entities.Questionnaire.AnswerText", b =>
                {
                    b.HasBaseType("DogQuiz.Data.Entities.Bases.Answer");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Test");
                });

            modelBuilder.Entity("BreedBreedMix", b =>
                {
                    b.HasOne("DogQuiz.Data.Entities.Breeds.Breed", null)
                        .WithMany()
                        .HasForeignKey("BreedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DogQuiz.Data.Entities.Breeds.BreedMix", null)
                        .WithMany()
                        .HasForeignKey("BreedMixId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DogQuiz.Data.Entities.Auth.Permission", b =>
                {
                    b.HasOne("DogQuiz.Data.Entities.Auth.User", null)
                        .WithMany("SpecialPermission")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("DogQuiz.Data.Entities.Auth.User", b =>
                {
                    b.HasOne("DogQuiz.Data.Entities.Auth.PermissionRole", "PermissionRole")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PermissionRole");
                });

            modelBuilder.Entity("DogQuiz.Data.Entities.Bases.Answer", b =>
                {
                    b.HasOne("DogQuiz.Data.Entities.Auth.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DogQuiz.Data.Entities.Auth.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.HasOne("DogQuiz.Data.Entities.Bases.Question", "Question")
                        .WithOne("Answer")
                        .HasForeignKey("DogQuiz.Data.Entities.Bases.Answer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DogQuiz.Data.Entities.Auth.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("Question");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("DogQuiz.Data.Entities.Bases.Question", b =>
                {
                    b.HasOne("DogQuiz.Data.Entities.Breeds.Breed", "Breed")
                        .WithMany("Questions")
                        .HasForeignKey("BreedId");

                    b.HasOne("DogQuiz.Data.Entities.Auth.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DogQuiz.Data.Entities.Auth.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.HasOne("DogQuiz.Data.Entities.Auth.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("Breed");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("DogQuiz.Data.Entities.Breeds.Breed", b =>
                {
                    b.HasOne("DogQuiz.Data.Entities.Breeds.BreedCollection", null)
                        .WithMany("Breeds")
                        .HasForeignKey("BreedCollectionId");

                    b.HasOne("DogQuiz.Data.Entities.Auth.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DogQuiz.Data.Entities.Auth.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.HasOne("DogQuiz.Data.Entities.General.ImageDetail", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("DogQuiz.Data.Entities.Auth.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("Image");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("DogQuiz.Data.Entities.Breeds.BreedMix", b =>
                {
                    b.HasOne("DogQuiz.Data.Entities.Breeds.BreedCollection", null)
                        .WithMany("BreedMixes")
                        .HasForeignKey("BreedCollectionId");

                    b.HasOne("DogQuiz.Data.Entities.Auth.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DogQuiz.Data.Entities.Auth.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.HasOne("DogQuiz.Data.Entities.Auth.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("DogQuiz.Data.Entities.Breeds.BreedName", b =>
                {
                    b.HasOne("DogQuiz.Data.Entities.Breeds.Breed", "Breed")
                        .WithMany("AdditionalNames")
                        .HasForeignKey("BreedId");

                    b.HasOne("DogQuiz.Data.Entities.Breeds.BreedVariety", "BreedVariety")
                        .WithMany()
                        .HasForeignKey("BreedVarietyId");

                    b.HasOne("DogQuiz.Data.Entities.Auth.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DogQuiz.Data.Entities.Auth.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.HasOne("DogQuiz.Data.Entities.Auth.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("Breed");

                    b.Navigation("BreedVariety");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("DogQuiz.Data.Entities.Breeds.BreedRole", b =>
                {
                    b.HasOne("DogQuiz.Data.Entities.Breeds.Breed", "Breed")
                        .WithMany("Roles")
                        .HasForeignKey("BreedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DogQuiz.Data.Entities.Auth.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DogQuiz.Data.Entities.Auth.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.HasOne("DogQuiz.Data.Entities.Auth.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("Breed");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("DogQuiz.Data.Entities.Breeds.BreedVariety", b =>
                {
                    b.HasOne("DogQuiz.Data.Entities.Breeds.BreedCollection", null)
                        .WithMany("BreedVarieties")
                        .HasForeignKey("BreedCollectionId");

                    b.HasOne("DogQuiz.Data.Entities.Breeds.Breed", "Breed")
                        .WithMany("Varieties")
                        .HasForeignKey("BreedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DogQuiz.Data.Entities.Auth.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DogQuiz.Data.Entities.Auth.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.HasOne("DogQuiz.Data.Entities.Auth.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("Breed");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("DogQuiz.Data.Entities.Breeds.NotableDog", b =>
                {
                    b.HasOne("DogQuiz.Data.Entities.Breeds.Breed", "Breed")
                        .WithMany("NotableDogs")
                        .HasForeignKey("BreedId");

                    b.HasOne("DogQuiz.Data.Entities.Breeds.BreedMix", "BreedMix")
                        .WithMany()
                        .HasForeignKey("BreedMixId");

                    b.HasOne("DogQuiz.Data.Entities.Breeds.BreedVariety", "BreedVariety")
                        .WithMany()
                        .HasForeignKey("BreedVarietyId");

                    b.HasOne("DogQuiz.Data.Entities.Auth.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DogQuiz.Data.Entities.Auth.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.HasOne("DogQuiz.Data.Entities.General.ImageDetail", "PrimaryImage")
                        .WithMany()
                        .HasForeignKey("PrimaryImageId");

                    b.HasOne("DogQuiz.Data.Entities.Auth.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("Breed");

                    b.Navigation("BreedMix");

                    b.Navigation("BreedVariety");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("PrimaryImage");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("DogQuiz.Data.Entities.Breeds.NotableOwner", b =>
                {
                    b.HasOne("DogQuiz.Data.Entities.Breeds.BreedCollection", "BreedCollection")
                        .WithMany()
                        .HasForeignKey("BreedCollectionId");

                    b.HasOne("DogQuiz.Data.Entities.Breeds.Breed", null)
                        .WithMany("NotableOwners")
                        .HasForeignKey("BreedId");

                    b.HasOne("DogQuiz.Data.Entities.Auth.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DogQuiz.Data.Entities.Auth.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.HasOne("DogQuiz.Data.Entities.General.ImageDetail", "PrimaryImage")
                        .WithMany()
                        .HasForeignKey("PrimaryImageId");

                    b.HasOne("DogQuiz.Data.Entities.Auth.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("BreedCollection");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("PrimaryImage");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("DogQuiz.Data.Entities.General.ImageDetail", b =>
                {
                    b.HasOne("DogQuiz.Data.Entities.Breeds.Breed", null)
                        .WithMany("AdditionalImages")
                        .HasForeignKey("BreedId");

                    b.HasOne("DogQuiz.Data.Entities.Breeds.BreedMix", null)
                        .WithMany("Images")
                        .HasForeignKey("BreedMixId");

                    b.HasOne("DogQuiz.Data.Entities.Auth.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DogQuiz.Data.Entities.Breeds.NotableDog", null)
                        .WithMany("AdditionalImages")
                        .HasForeignKey("NotableDogId");

                    b.HasOne("DogQuiz.Data.Entities.Breeds.NotableOwner", null)
                        .WithMany("AdditionalImages")
                        .HasForeignKey("NotableOwnerId");

                    b.HasOne("DogQuiz.Data.Entities.Auth.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("DogQuiz.Data.Entities.General.Tag", b =>
                {
                    b.HasOne("DogQuiz.Data.Entities.Breeds.Breed", null)
                        .WithMany("BreedTags")
                        .HasForeignKey("BreedId");

                    b.HasOne("DogQuiz.Data.Entities.Auth.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DogQuiz.Data.Entities.Auth.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.HasOne("DogQuiz.Data.Entities.General.TagGroup", "Group")
                        .WithMany("Tags")
                        .HasForeignKey("TagGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DogQuiz.Data.Entities.Auth.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("Group");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("DogQuiz.Data.Entities.General.TagGroup", b =>
                {
                    b.HasOne("DogQuiz.Data.Entities.Auth.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DogQuiz.Data.Entities.Auth.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.HasOne("DogQuiz.Data.Entities.Auth.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("DogQuiz.Data.Entities.Questionnaire.Fact", b =>
                {
                    b.HasOne("DogQuiz.Data.Entities.Breeds.Breed", "Breed")
                        .WithMany("Facts")
                        .HasForeignKey("BreedId");

                    b.HasOne("DogQuiz.Data.Entities.Auth.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DogQuiz.Data.Entities.Auth.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.HasOne("DogQuiz.Data.Entities.Auth.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("Breed");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("PermissionRole", b =>
                {
                    b.HasOne("DogQuiz.Data.Entities.Auth.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DogQuiz.Data.Entities.Auth.PermissionRole", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DogQuiz.Data.Entities.Auth.PermissionRole", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DogQuiz.Data.Entities.Auth.User", b =>
                {
                    b.Navigation("SpecialPermission");
                });

            modelBuilder.Entity("DogQuiz.Data.Entities.Bases.Question", b =>
                {
                    b.Navigation("Answer")
                        .IsRequired();
                });

            modelBuilder.Entity("DogQuiz.Data.Entities.Breeds.Breed", b =>
                {
                    b.Navigation("AdditionalImages");

                    b.Navigation("AdditionalNames");

                    b.Navigation("BreedTags");

                    b.Navigation("Facts");

                    b.Navigation("NotableDogs");

                    b.Navigation("NotableOwners");

                    b.Navigation("Questions");

                    b.Navigation("Roles");

                    b.Navigation("Varieties");
                });

            modelBuilder.Entity("DogQuiz.Data.Entities.Breeds.BreedCollection", b =>
                {
                    b.Navigation("BreedMixes");

                    b.Navigation("BreedVarieties");

                    b.Navigation("Breeds");
                });

            modelBuilder.Entity("DogQuiz.Data.Entities.Breeds.BreedMix", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("DogQuiz.Data.Entities.Breeds.NotableDog", b =>
                {
                    b.Navigation("AdditionalImages");
                });

            modelBuilder.Entity("DogQuiz.Data.Entities.Breeds.NotableOwner", b =>
                {
                    b.Navigation("AdditionalImages");
                });

            modelBuilder.Entity("DogQuiz.Data.Entities.General.TagGroup", b =>
                {
                    b.Navigation("Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
